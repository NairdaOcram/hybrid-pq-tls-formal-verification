
--- Hybrid post-quantum TLS

***(

   IETF: https://datatracker.ietf.org/doc/html/draft-campagna-tls-bike-sike-hybrid
   
  ┌───────────────────────────────────────────────────────────────────────────────────┐
  │                                                                                   │
  │                Client                                    Server                   │
  │                                                                                   │
  │      ┌───────────────────────────┐                                                │
  │      │        ClientHello        │                                                │
  │      └───────────────────────────┘  ──────>    ┌───────────────────────────┐      │
  │                                                │        ServerHello        │      │
  │                                                │        Certificate        │      │
  │                                                │     ServerKeyExchange     │      │
  │                                                │    CertificateRequest*+   │      │
  │                                                │      ServerHelloDone      │      │
  │     ┌───────────────────────────┐   <──────    └───────────────────────────┘      │
  │     │       Certificate*+       │                                                 │             
  │     │     ClientKeyExchange     │                                                 │
  │     │    CertificateVerify*+    │                                                 │
  │     │     [ChangeCipherSpec]    │                                                 │              
  │     │          Finished         │                                                 │               
  │     └───────────────────────────┘   ──────>    ┌───────────────────────────┐      │
  │                                                │     [ChangeCipherSpec]    │      │
  │                                                │          Finished         │      │
  │                                     <──────    └───────────────────────────┘      │
  │                                                                                   │
  │     ┌───────────────────────────┐              ┌───────────────────────────┐      │
  │     │      Application Data     │   <─────>    │      Application Data     │      │     
  │     └───────────────────────────┘              └───────────────────────────┘      │
  │                                                                                   │
  └───────────────────────────────────────────────────────────────────────────────────┘

  * message is not sent under some conditions
  + message is not sent unless client authentication is desired
  
)***


--- Syntax module ---
fmod PROTOCOL-EXAMPLE-SYMBOLS is
  --- Importing sorts Msg, Fresh, Public, and GhostData
  protecting DEFINITION-PROTOCOL-RULES .

  --- Sorts declaration
  sorts Name 
        Random 
        Certificate 
        Session
        Scalar 
        Point 
        Elliptic-Curve-Key
        Post-Quantum-Public-Key
        Post-Quantum-Secret-Key
        Post-Quantum-Shared-Key
        Cipher
        Pre-Master-Secret
        Master-Secret .

  --- Subsorts declaration
  subsort Random 
          Session 
          Certificate 
          Scalar 
          Elliptic-Curve-Key
          Post-Quantum-Public-Key
          Post-Quantum-Secret-Key
          Post-Quantum-Shared-Key
          Cipher
          Pre-Master-Secret
          Master-Secret < Msg .
  subsort Name < Public .
  subsort Point < Elliptic-Curve-Key .

  --- Elliptic-curve Diffie–Hellman operators declaration
  --- Scalar multiplication
  op _*_ : Scalar Scalar -> Scalar [frozen assoc comm] .
  --- Point generator
  op point : -> Point .
  --- Point exponentation operator
  op p : -> Point .
  --- Exponentiation
  op exponentiation : Point Scalar -> Point [frozen] .
  --- Server, Client and Intruder
  ops server client intruder : -> Name .
  --- Random number generator
  op random : Name Fresh -> Random [frozen] .
  --- Scalar generator
  op scalar : Name Fresh -> Scalar [frozen] .
  --- Session generator
  op session : Name Fresh -> Session [frozen] .

  --- Post-Quantum key encapsulation mechanism
  --- Secret key generator
  op post-quantum-secret-key : Name Fresh -> Post-Quantum-Secret-Key [frozen] .
  --- Public key generator
  op post-quantum-public-key : Post-Quantum-Secret-Key -> Post-Quantum-Public-Key [frozen] .
  --- Shared key generator
  op post-quantum-shared-key : Post-Quantum-Secret-Key Post-Quantum-Secret-Key -> Post-Quantum-Shared-Key [frozen] .
  --- Encapsulation procedure, returning ciphertext
  op encapsulation-cipher : Post-Quantum-Public-Key Post-Quantum-Secret-Key -> Cipher [frozen] .
  --- Encapsulation procedure, returning shared key
  op encapsulation-key : Post-Quantum-Public-Key Post-Quantum-Secret-Key -> Post-Quantum-Shared-Key [frozen] .
  --- Decapsulation procedure
  op decapsulation : Cipher Post-Quantum-Secret-Key -> Post-Quantum-Shared-Key [frozen] .

  --- General
  --- Pre-master Secret generator
  op pre-master-secret : Elliptic-Curve-Key Post-Quantum-Shared-Key -> Pre-Master-Secret [frozen] .
  --- Master Secret generator
  op master-secret : Pre-Master-Secret Random Random Point Cipher -> Master-Secret [frozen] .
  --- Certificate generator
  op certificate : Name -> Certificate [frozen] .
  --- Signature generator
  op signature : Name Point Post-Quantum-Public-Key Random Random -> Msg [frozen] .
  --- Encryption procedure
  op encryption : Master-Secret Msg -> Msg [frozen] .
  --- Client encryption procedure
  op client-encryption : Master-Secret Msg Msg Msg Msg Msg -> Msg [frozen] .
  --- Server encryption procedure
  op server-encryption : Master-Secret Msg Msg Msg Msg Msg Msg -> Msg [frozen] .
  --- Decryption procedure
  op decryption : Master-Secret Msg -> Msg [frozen] .
  --- Message concatenation
  op _;_ : Msg  Msg -> Msg [gather (e E) frozen] .

  --- Protocol phases
  --- ClientHello
  op client-hello : Random -> Msg .
  --- ServerHello
  op server-hello : Random Session -> Msg .
  --- ServerCertificate
  op server-certificate : Certificate -> Msg .
  --- ServerKeyExchange
  op server-key-exchange : Point Post-Quantum-Public-Key Msg -> Msg .
  --- ClientKeyExchange
  op client-key-exchange : Point Cipher -> Msg .
  --- ClientFinished
  op client-finished : Msg -> Msg .
  --- ServerFinished
  op server-finished : Msg -> Msg .
endfm

--- Algebraic module ---
fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .

  --- Elliptic-curve Diffie–Hellman algebraic property
  --- Exponentiation equation
  eq exponentiation(exponentiation(PointC:Point, Scalar1:Scalar), Scalar2:Scalar) =
     exponentiation(PointC:Point, Scalar1:Scalar * Scalar2:Scalar) [variant] .

  --- Post-Quantum key encapsulation mechanism algebraic properties
  --- Encapsulation key equation
  eq encapsulation-key(post-quantum-public-key(secret-key1:Post-Quantum-Secret-Key), secret-key2:Post-Quantum-Secret-Key) =
     post-quantum-shared-key(secret-key1:Post-Quantum-Secret-Key, secret-key2:Post-Quantum-Secret-Key) [variant] .
  --- Decapsulation equation
  eq decapsulation(encapsulation-cipher(post-quantum-public-key(secret-key1:Post-Quantum-Secret-Key), secret-key2:Post-Quantum-Secret-Key), secret-key1:Post-Quantum-Secret-Key) =
     post-quantum-shared-key(secret-key1:Post-Quantum-Secret-Key, secret-key2:Post-Quantum-Secret-Key) [variant] .

  --- General algebraic property
  eq decryption(master-secret1:Master-Secret, encryption(master-secret1:Master-Secret, msg1:Msg)) =
     msg1:Msg [variant] .

  eq decryption(master-secret1:Master-Secret, client-encryption(master-secret1:Master-Secret, msg1:Msg, msg2:Msg,
     msg3:Msg, msg4:Msg, msg5:Msg)) = msg1:Msg [variant] .

  eq decryption(master-secret1:Master-Secret, server-encryption(master-secret1:Master-Secret, msg1:Msg, msg2:Msg,
     msg3:Msg, msg4:Msg, msg5:Msg, msg6:Msg)) = msg1:Msg [variant] .
  
endfm

--- Behavior module ---
fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  vars ClientC ServerC ServerS : Name .
  vars NonceC NonceS : Random .
  vars SessionC SessionS : Session .
  vars PointC PointS : Point .
  vars Post-Quantum-Public-KeyC Post-Quantum-Public-KeyS : Post-Quantum-Public-Key .
  vars Post-Quantum-Secret-KeyC : Post-Quantum-Secret-Key .
  vars random1 random2 random3 random4 random1' random2' random3' random4' : Fresh .
  vars CipherS CipherC : Cipher .
  vars Msg1 Msg2 Msg3 Msg4 Msg5 Msg6 : Msg .
  vars Random1 Random2 : Random .
  vars Certificate1 : Certificate .
  vars Master-Secret1 : Master-Secret .
  vars Scalar1 Scalar2 : Scalar .

  eq STRANDS-DOLEVYAO =
      :: nil :: [nil | -(Msg1 ; Msg2), +(Msg1), nil] &
      :: nil :: [nil | -(Msg1 ; Msg2), +(Msg2), nil] &
      :: nil :: [nil | -(Msg1), -(Msg2), +(Msg1 ; Msg2), nil] &

      :: nil :: [nil | -(client-hello(Random1)), +(Random1), nil] &
      :: nil :: [nil | -(Random1), +(client-hello(Random1)), nil] &

      :: nil :: [nil | -(server-hello(Random1, SessionC)), +(Random1), nil] &
      :: nil :: [nil | -(server-hello(Random1, SessionC)), +(SessionC), nil] &
      :: nil :: [nil | -(Random1), -(SessionC), +(server-hello(Random1, SessionC)), nil] &

      :: nil :: [nil | -(server-certificate(Certificate1)), +(Certificate1), nil] &
      :: nil :: [nil | -(Certificate1), +(server-certificate(Certificate1)), nil] &

      :: nil :: [nil | -(server-key-exchange(PointC, Post-Quantum-Public-KeyC, Msg1)), +(PointC), nil] &
      :: nil :: [nil | -(server-key-exchange(PointC, Post-Quantum-Public-KeyC, Msg1)), +(Post-Quantum-Public-KeyC), nil] &
      :: nil :: [nil | -(server-key-exchange(PointC, Post-Quantum-Public-KeyC, Msg1)), +(Msg1), nil] &
      :: nil :: [nil | -(PointC), -(Post-Quantum-Public-KeyC), -(Msg1), +(server-key-exchange(PointC, Post-Quantum-Public-KeyC, Msg1)), nil] &

      :: nil :: [nil | -(client-key-exchange(PointC, CipherS)), +(PointC), nil] &
      :: nil :: [nil | -(client-key-exchange(PointC, CipherS)), +(CipherS), nil] &
      :: nil :: [nil | -(PointC), -(CipherS), +(client-key-exchange(PointC, CipherS)), nil] &

      :: nil :: [nil | -(client-finished(Msg1)), +(Msg1), nil] &
      :: nil :: [nil | -(Msg1), +(client-finished(Msg1)), nil] &

      :: nil :: [nil | -(server-finished(Msg1)), +(Msg1), nil] &
      :: nil :: [nil | -(Msg1), +(server-finished(Msg1)), nil] &

      :: random1 :: [nil | +(random(intruder, random1)), nil] &

      :: random1 :: [nil | +(scalar(intruder, random1)), nil] &

      :: random1 :: [nil | +(session(intruder, random1)), nil] &

      :: random1 :: [nil | +(post-quantum-secret-key(intruder, random1)), nil] &

      :: nil :: [nil | -(Master-Secret1), -(Msg1), +(encryption(Master-Secret1, Msg1)), nil] &
      :: nil :: [nil | -(Master-Secret1), -(Msg1), -(Msg2), -(Msg3), -(Msg4), -(Msg5), +(client-encryption(Master-Secret1, Msg1, Msg2, Msg3, Msg4, Msg5)), nil] &
      :: nil :: [nil | -(Master-Secret1), -(Msg1), -(Msg2), -(Msg3), -(Msg4), -(Msg5), -(Msg6), +(server-encryption(Master-Secret1, Msg1, Msg2, Msg3, Msg4, Msg5, Msg6)), nil] &
      :: nil :: [nil | -(Master-Secret1), -(Msg1), +(decryption(Master-Secret1, Msg1)), nil] &

      :: nil :: [nil | -(exponentiation(p, Scalar1)), -(exponentiation(p, Scalar2)), +(exponentiation(p, Scalar1 * Scalar2)), nil] &

      :: nil :: [ nil | -(Post-Quantum-Public-KeyC), -(Post-Quantum-Secret-KeyC), +(encapsulation-cipher(Post-Quantum-Public-KeyC, Post-Quantum-Secret-KeyC)), nil ] &
      :: nil :: [ nil | -(Post-Quantum-Public-KeyC), -(Post-Quantum-Secret-KeyC), +(encapsulation-key(Post-Quantum-Public-KeyC, Post-Quantum-Secret-KeyC)), nil ] &
      :: nil :: [ nil | -(CipherS), -(Post-Quantum-Secret-KeyC), +(decapsulation(CipherS, Post-Quantum-Secret-KeyC)), nil ] &
      :: nil :: [ nil | -(Msg1), -(PointC), -(Post-Quantum-Public-KeyC), -(Random1), -(Random2), +(signature(intruder, PointC, Post-Quantum-Public-KeyC, Random1, Random2)), nil ]
      [nonexec] .

  --- Model of the protocol
  eq STRANDS-PROTOCOL =
      :: random1, random2, random3 ::
      [nil |
      --- Client Side
      --- ClientHello
      + (client-hello(
            random(
               ClientC, 
               random1
            )
         )),
      --- ServerHello
      - (server-hello(
            NonceS, 
            SessionS
         )),
      --- ServerCertificate
      - (server-certificate(
            certificate(
               ServerC
            )
         )),
      --- ServerKeyExchange
      - (server-key-exchange(
            PointS, 
            Post-Quantum-Public-KeyS, 
            signature(
               ServerC, 
               PointS, 
               Post-Quantum-Public-KeyS, 
               random(
                  ClientC, 
                  random1
               ), 
               NonceS
            )
         )),
      --- ClientKeyExchange
      + (client-key-exchange(
            exponentiation(
               p, 
               scalar(
                  ClientC, 
                  random2
               )
            ), 
            encapsulation-cipher(
               Post-Quantum-Public-KeyS, 
               post-quantum-secret-key(
                  ClientC, 
                  random3
               )
            )
         )),
      --- ClientFinished
      + (client-finished(
            client-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointS, 
                        scalar(
                           ClientC, 
                           random2
                        )
                     ), 
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceS, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceS, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerC
                  )
               )), 
               (server-key-exchange(
                  PointS, 
                  Post-Quantum-Public-KeyS, 
                  signature(
                     ServerC, 
                     PointS, 
                     Post-Quantum-Public-KeyS, 
                     random(
                        ClientC, 
                        random1
                     ), 
                     NonceS
                  )
               )), 
               (client-key-exchange(
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ))
            )
         )),
      --- ServerFinished
      - (server-finished(
            server-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointS,
                        scalar(
                           ClientC,
                           random2
                        )
                     ),
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceS, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceS, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerC
                  )
               )), 
               (server-key-exchange(
                  PointS,
                  Post-Quantum-Public-KeyS,
                  signature(
                     ServerC,
                     PointS,
                     Post-Quantum-Public-KeyS,
                     random(
                        ClientC,
                        random1
                     ),
                     NonceS
                  )
               )),
               (client-key-exchange(
                  exponentiation(
                     p,
                     scalar(
                        ClientC,
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC,
                        random3
                     )
                  )
               )), 
               (client-finished(
                  client-encryption(
                     master-secret(
                        pre-master-secret(
                           exponentiation(
                              PointS,
                              scalar(
                                 ClientC,
                                 random2
                              )
                           ), 
                           encapsulation-key(
                              Post-Quantum-Public-KeyS, 
                              post-quantum-secret-key(
                                 ClientC,
                                 random3
                              )
                           )
                        ), 
                        random(
                           ClientC,
                           random1
                        ), 
                        NonceS,
                        exponentiation(
                           p, 
                           scalar(
                              ClientC,
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS,
                           post-quantum-secret-key(
                              ClientC,
                              random3
                           )
                        )
                     ),
                     (client-hello(
                        random(
                           ClientC, 
                           random1
                        )
                     )), 
                     (server-hello(
                        NonceS, 
                        SessionS
                     )), 
                     (server-certificate(
                        certificate(
                           ServerC
                        )
                     )), 
                     (server-key-exchange(
                        PointS, 
                        Post-Quantum-Public-KeyS, 
                        signature(
                           ServerC, 
                           PointS, 
                           Post-Quantum-Public-KeyS, 
                           random(
                              ClientC, 
                              random1
                           ), 
                           NonceS
                        )
                     )), 
                     (client-key-exchange(
                        exponentiation(
                           p, 
                           scalar(
                              ClientC, 
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS, 
                           post-quantum-secret-key(
                              ClientC, 
                              random3
                           )
                        )
                     ))
                  )
               ))
            )
         )), nil] &
            
      :: random1', random2', random3', random4' ::
      [nil |
      --- Server Side
      --- ClientHello
      - (client-hello(
            NonceC
         )),
      --- ServerHello
      + (server-hello(
            random(
               ServerS, 
               random1'
            ), 
            session(
               ServerS, 
               random2'
            )
         )),
      --- ServerCertificate
      + (server-certificate(
            certificate(
               ServerS
            )
         )),
      --- ServerKeyExchange
      + (server-key-exchange(
            exponentiation(
               p, 
               scalar(
                  ServerS, 
                  random3'
               )
            ), 
            post-quantum-public-key(
               post-quantum-secret-key(
                  ServerS, 
                  random4'
               )
            ), 
            signature(
               ServerS, 
               exponentiation(
                  p, 
                  scalar(
                     ServerS, 
                     random3'
                  )
               ), 
               post-quantum-public-key(
                  post-quantum-secret-key(
                     ServerS, 
                     random4'
                  )
               ), 
               NonceC, 
               random(
                  ServerS, 
                  random1'
               )
            )
         )),
      --- ClientKeyExchange
      - (client-key-exchange(
            PointC, 
            CipherC
         )),
      --- ClientFinished
      - (client-finished(
            client-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointC,
                        scalar(
                           ServerS,
                           random3'
                        )
                     ),
                     decapsulation(
                        CipherC,
                        post-quantum-secret-key(
                           ServerS,
                           random4'
                        )
                     )
                  ),
                  NonceC,
                  random(
                     ServerS,
                     random1'
                  ),
                  PointC,
                  CipherC
               ),
               (client-hello(
                  NonceC
               )),
               (server-hello(
                  random(
                     ServerS,
                     random1'
                  ),
                  session(
                     ServerS,
                     random2'
                  )
               )),
               (server-certificate(
                  certificate(
                     ServerS
                  )
               )),
               (server-key-exchange(
                  exponentiation(
                     p,
                     scalar(
                        ServerS,
                        random3'
                     )
                  ),
                  post-quantum-public-key(
                     post-quantum-secret-key(
                        ServerS,
                        random4'
                     )
                  ),
                  signature(
                     ServerS,
                     exponentiation(
                        p,
                        scalar(
                           ServerS,
                           random3'
                        )
                     ),
                     post-quantum-public-key(
                        post-quantum-secret-key(
                           ServerS,
                           random4'
                        )
                     ),
                     NonceC,
                     random(
                        ServerS,
                        random1'
                     )
                  )
               )),
               (client-key-exchange(
                  PointC,
                  CipherC
               ))
            )
         )),
         --- ServerFinished
         + (server-finished(
               server-encryption(
                  master-secret(
                     pre-master-secret(
                        exponentiation(
                           PointC,
                           scalar(
                              ServerS,
                              random3'
                           )
                        ),
                        decapsulation(
                           CipherC,
                           post-quantum-secret-key(
                              ServerS,
                              random4'
                           )
                        )
                     ),
                     NonceC,
                     random(
                        ServerS,
                        random1'
                     ),
                     PointC,
                     CipherC
                  ),
                  (client-hello(
                     NonceC
                  )),
                  (server-hello(
                     random(
                        ServerS,
                        random1'
                     ),
                     session(
                        ServerS,
                        random2'
                     )
                  )),
                  (server-certificate(
                     certificate(
                        ServerS
                     )
                  )),
                  (server-key-exchange(
                     exponentiation(
                        p,
                        scalar(
                           ServerS,
                           random3'
                        )
                     ),
                     post-quantum-public-key(
                        post-quantum-secret-key(
                           ServerS,
                           random4'
                        )
                     ),
                     signature(
                        ServerS,
                        exponentiation(
                           p,
                           scalar(
                              ServerS,
                              random3'
                           )
                        ),
                        post-quantum-public-key(
                           post-quantum-secret-key(
                              ServerS,
                              random4'
                           )
                        ),
                        NonceC,
                        random(
                           ServerS,
                           random1'
                        )
                     )
                  )),
                  (client-key-exchange(
                     PointC,
                     CipherC
                  )),
                  (client-finished(
                     client-encryption(
                        master-secret(
                           pre-master-secret(
                              exponentiation(
                                 PointC,
                                 scalar(
                                    ServerS,
                                    random3'
                                 )
                              ),
                              decapsulation(
                                 CipherC,
                                 post-quantum-secret-key(
                                    ServerS,
                                    random4'
                                 )
                              )
                           ),
                           NonceC,
                           random(
                              ServerS,
                              random1'
                           ),
                           PointC,
                           CipherC
                        ),
                        (client-hello(
                           NonceC
                        )),
                        (server-hello(
                           random(
                              ServerS,
                              random1'
                           ),
                           session(
                              ServerS,
                              random2'
                           )
                        )),
                        (server-certificate(
                           certificate(
                              ServerS
                           )
                        )),
                        (server-key-exchange(
                           exponentiation(
                              p,
                              scalar(
                                 ServerS,
                                 random3'
                              )
                           ),
                           post-quantum-public-key(
                              post-quantum-secret-key(
                                 ServerS,
                                 random4'
                              )
                           ),
                           signature(
                              ServerS,
                              exponentiation(
                                 p,
                                 scalar(
                                    ServerS,
                                    random3'
                                 )
                              ),
                              post-quantum-public-key(
                                 post-quantum-secret-key(
                                    ServerS,
                                    random4'
                                 )
                              ),
                              NonceC,
                              random(
                                 ServerS,
                                 random1'
                              )
                           )
                        )),
                        (client-key-exchange(
                           PointC,
                           CipherC
                        ))
                     )
                  ))
               )
            )), nil] [nonexec] .

  --- Attack States    
  --- Secrecy property of ECDH shared secret key
  eq ATTACK-STATE(0) = 
      :: random1, random2, random3 ::
      [nil,
      --- Client Side
      --- ClientHello
      + (client-hello(
            random(
               ClientC, 
               random1
            )
         )),
      --- ServerHello
      - (server-hello(
            NonceS, 
            SessionS
         )),
      --- ServerCertificate
      - (server-certificate(
            certificate(
               ServerC
            )
         )),
      --- ServerKeyExchange
      - (server-key-exchange(
            PointS, 
            Post-Quantum-Public-KeyS, 
            signature(
               ServerC, 
               PointS, 
               Post-Quantum-Public-KeyS, 
               random(
                  ClientC, 
                  random1
               ), 
               NonceS
            )
         )),
      --- ClientKeyExchange
      + (client-key-exchange(
            exponentiation(
               p, 
               scalar(
                  ClientC, 
                  random2
               )
            ), 
            encapsulation-cipher(
               Post-Quantum-Public-KeyS, 
               post-quantum-secret-key(
                  ClientC, 
                  random3
               )
            )
         )),
      --- ClientFinished
      + (client-finished(
            client-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointS, 
                        scalar(
                           ClientC, 
                           random2
                        )
                     ), 
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceS, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceS, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerC
                  )
               )), 
               (server-key-exchange(
                  PointS, 
                  Post-Quantum-Public-KeyS, 
                  signature(
                     ServerC, 
                     PointS, 
                     Post-Quantum-Public-KeyS, 
                     random(
                        ClientC, 
                        random1
                     ), 
                     NonceS
                  )
               )), 
               (client-key-exchange(
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ))
            )
         )),
      --- ServerFinished
      - (server-finished(
            server-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointS,
                        scalar(
                           ClientC,
                           random2
                        )
                     ),
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceS, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceS, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerC
                  )
               )), 
               (server-key-exchange(
                  PointS,
                  Post-Quantum-Public-KeyS,
                  signature(
                     ServerC,
                     PointS,
                     Post-Quantum-Public-KeyS,
                     random(
                        ClientC,
                        random1
                     ),
                     NonceS
                  )
               )),
               (client-key-exchange(
                  exponentiation(
                     p,
                     scalar(
                        ClientC,
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC,
                        random3
                     )
                  )
               )), 
               (client-finished(
                  client-encryption(
                     master-secret(
                        pre-master-secret(
                           exponentiation(
                              PointS,
                              scalar(
                                 ClientC,
                                 random2
                              )
                           ), 
                           encapsulation-key(
                              Post-Quantum-Public-KeyS, 
                              post-quantum-secret-key(
                                 ClientC,
                                 random3
                              )
                           )
                        ), 
                        random(
                           ClientC,
                           random1
                        ), 
                        NonceS,
                        exponentiation(
                           p, 
                           scalar(
                              ClientC,
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS,
                           post-quantum-secret-key(
                              ClientC,
                              random3
                           )
                        )
                     ),
                     (client-hello(
                        random(
                           ClientC, 
                           random1
                        )
                     )), 
                     (server-hello(
                        NonceS, 
                        SessionS
                     )), 
                     (server-certificate(
                        certificate(
                           ServerC
                        )
                     )), 
                     (server-key-exchange(
                        PointS, 
                        Post-Quantum-Public-KeyS, 
                        signature(
                           ServerC, 
                           PointS, 
                           Post-Quantum-Public-KeyS, 
                           random(
                              ClientC, 
                              random1
                           ), 
                           NonceS
                        )
                     )), 
                     (client-key-exchange(
                        exponentiation(
                           p, 
                           scalar(
                              ClientC, 
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS, 
                           post-quantum-secret-key(
                              ClientC, 
                              random3
                           )
                        )
                     ))
                  )
               ))
            )
         )) | nil]
      || exponentiation(
            PointS,
            scalar(
               ClientC, 
               random2
            )
         )
         inI, empty
      || nil
      || nil
      || nil
      [nonexec] .

  --- Secrecy property of Post-Quantum Key Encapsulation Method shared secret key
  eq ATTACK-STATE(1) =
      :: random1, random2, random3 ::
      [nil,
      --- Client Side
      --- ClientHello
      + (client-hello(
            random(
               ClientC, 
               random1
            )
         )),
      --- ServerHello
      - (server-hello(
            NonceC, 
            SessionS
         )),
      --- ServerCertificate
      - (server-certificate(
            certificate(
               ServerS
            )
         )),
      --- ServerKeyExchange
      - (server-key-exchange(
            PointC, 
            Post-Quantum-Public-KeyS, 
            signature(
               ServerS, 
               PointC, 
               Post-Quantum-Public-KeyS, 
               random(
                  ClientC, 
                  random1
               ), 
               NonceC
            )
         )),
      --- ClientKeyExchange
      + (client-key-exchange(
            exponentiation(
               p, 
               scalar(
                  ClientC, 
                  random2
               )
            ), 
            encapsulation-cipher(
               Post-Quantum-Public-KeyS, 
               post-quantum-secret-key(
                  ClientC, 
                  random3
               )
            )
         )),
      --- ClientFinished
      + (client-finished(
            client-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointC, 
                        scalar(
                           ClientC, 
                           random2
                        )
                     ), 
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceC, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceC, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerS
                  )
               )), 
               (server-key-exchange(
                  PointC, 
                  Post-Quantum-Public-KeyS, 
                  signature(
                     ServerS, 
                     PointC, 
                     Post-Quantum-Public-KeyS, 
                     random(
                        ClientC, 
                        random1
                     ), 
                     NonceC
                  )
               )), 
               (client-key-exchange(
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ))
            )
         )),
      --- ServerFinished
      - (server-finished(
            server-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointC,
                        scalar(
                           ClientC,
                           random2
                        )
                     ),
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceC, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceC, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerS
                  )
               )), 
               (server-key-exchange(
                  PointC,
                  Post-Quantum-Public-KeyS,
                  signature(
                     ServerS,
                     PointC,
                     Post-Quantum-Public-KeyS,
                     random(
                        ClientC,
                        random1
                     ),
                     NonceC
                  )
               )),
               (client-key-exchange(
                  exponentiation(
                     p,
                     scalar(
                        ClientC,
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC,
                        random3
                     )
                  )
               )), 
               (client-finished(
                  client-encryption(
                     master-secret(
                        pre-master-secret(
                           exponentiation(
                              PointC,
                              scalar(
                                 ClientC,
                                 random2
                              )
                           ), 
                           encapsulation-key(
                              Post-Quantum-Public-KeyS, 
                              post-quantum-secret-key(
                                 ClientC,
                                 random3
                              )
                           )
                        ), 
                        random(
                           ClientC,
                           random1
                        ), 
                        NonceC,
                        exponentiation(
                           p, 
                           scalar(
                              ClientC,
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS,
                           post-quantum-secret-key(
                              ClientC,
                              random3
                           )
                        )
                     ),
                     (client-hello(
                        random(
                           ClientC, 
                           random1
                        )
                     )), 
                     (server-hello(
                        NonceC, 
                        SessionS
                     )), 
                     (server-certificate(
                        certificate(
                           ServerS
                        )
                     )), 
                     (server-key-exchange(
                        PointC, 
                        Post-Quantum-Public-KeyS, 
                        signature(
                           ServerS, 
                           PointC, 
                           Post-Quantum-Public-KeyS, 
                           random(
                              ClientC, 
                              random1
                           ), 
                           NonceC
                        )
                     )), 
                     (client-key-exchange(
                        exponentiation(
                           p, 
                           scalar(
                              ClientC, 
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS, 
                           post-quantum-secret-key(
                              ClientC, 
                              random3
                           )
                        )
                     ))
                  )
               ))
            )
         )) | nil]
      || encapsulation-key(
            Post-Quantum-Public-KeyS,
            post-quantum-secret-key(
               ClientC,
               random3
            )
         )
         inI, empty
      || nil
      || nil
      || nil
      [nonexec] .

  --- Authentication property
  eq ATTACK-STATE(2) =
      :: random1, random2, random3 ::
      [nil,
      --- Client Side
      --- ClientHello
      + (client-hello(
            random(
               ClientC, 
               random1
            )
         )),
      --- ServerHello
      - (server-hello(
            NonceS, 
            SessionS
         )),
      --- ServerCertificate
      - (server-certificate(
            certificate(
               ServerC
            )
         )),
      --- ServerKeyExchange
      - (server-key-exchange(
            PointS, 
            Post-Quantum-Public-KeyS, 
            signature(
               ServerC, 
               PointS, 
               Post-Quantum-Public-KeyS, 
               random(
                  ClientC, 
                  random1
               ), 
               NonceS
            )
         )),
      --- ClientKeyExchange
      + (client-key-exchange(
            exponentiation(
               p, 
               scalar(
                  ClientC, 
                  random2
               )
            ), 
            encapsulation-cipher(
               Post-Quantum-Public-KeyS, 
               post-quantum-secret-key(
                  ClientC, 
                  random3
               )
            )
         )),
      --- ClientFinished
      + (client-finished(
            client-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointS, 
                        scalar(
                           ClientC, 
                           random2
                        )
                     ), 
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceS, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceS, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerC
                  )
               )), 
               (server-key-exchange(
                  PointS, 
                  Post-Quantum-Public-KeyS, 
                  signature(
                     ServerC, 
                     PointS, 
                     Post-Quantum-Public-KeyS, 
                     random(
                        ClientC, 
                        random1
                     ), 
                     NonceS
                  )
               )), 
               (client-key-exchange(
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ))
            )
         )),
      --- ServerFinished
      - (server-finished(
            server-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointS,
                        scalar(
                           ClientC,
                           random2
                        )
                     ),
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceS, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceS, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerC
                  )
               )), 
               (server-key-exchange(
                  PointS,
                  Post-Quantum-Public-KeyS,
                  signature(
                     ServerC,
                     PointS,
                     Post-Quantum-Public-KeyS,
                     random(
                        ClientC,
                        random1
                     ),
                     NonceS
                  )
               )),
               (client-key-exchange(
                  exponentiation(
                     p,
                     scalar(
                        ClientC,
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC,
                        random3
                     )
                  )
               )), 
               (client-finished(
                  client-encryption(
                     master-secret(
                        pre-master-secret(
                           exponentiation(
                              PointS,
                              scalar(
                                 ClientC,
                                 random2
                              )
                           ), 
                           encapsulation-key(
                              Post-Quantum-Public-KeyS, 
                              post-quantum-secret-key(
                                 ClientC,
                                 random3
                              )
                           )
                        ), 
                        random(
                           ClientC,
                           random1
                        ), 
                        NonceS,
                        exponentiation(
                           p, 
                           scalar(
                              ClientC,
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS,
                           post-quantum-secret-key(
                              ClientC,
                              random3
                           )
                        )
                     ),
                     (client-hello(
                        random(
                           ClientC, 
                           random1
                        )
                     )), 
                     (server-hello(
                        NonceS, 
                        SessionS
                     )), 
                     (server-certificate(
                        certificate(
                           ServerC
                        )
                     )), 
                     (server-key-exchange(
                        PointS, 
                        Post-Quantum-Public-KeyS, 
                        signature(
                           ServerC, 
                           PointS, 
                           Post-Quantum-Public-KeyS, 
                           random(
                              ClientC, 
                              random1
                           ), 
                           NonceS
                        )
                     )), 
                     (client-key-exchange(
                        exponentiation(
                           p, 
                           scalar(
                              ClientC, 
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS, 
                           post-quantum-secret-key(
                              ClientC, 
                              random3
                           )
                        )
                     ))
                  )
               ))
            )
         )) | nil]
      || empty
      || nil
      || nil
      || never(
         :: random1', random2', random3', random4' ::
         [nil |
         --- Client Side
         --- ClientHello
         - (client-hello(
               random(
                  ClientC, 
                  random1
               )
            )),
         --- ServerHello
         + (server-hello(
               NonceS, 
               SessionS
            )),
         --- ServerCertificate
         + (server-certificate(
               certificate(
                  ServerC
               )
            )),
         --- ServerKeyExchange
         + (server-key-exchange(
               PointS, 
               Post-Quantum-Public-KeyS, 
               signature(
                  ServerC, 
                  PointS, 
                  Post-Quantum-Public-KeyS, 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceS
               )
            )),
         --- ClientKeyExchange
         - (client-key-exchange(
               exponentiation(
                  p, 
                  scalar(
                     ClientC, 
                     random2
                  )
               ), 
               encapsulation-cipher(
                  Post-Quantum-Public-KeyS, 
                  post-quantum-secret-key(
                     ClientC, 
                     random3
                  )
               )
            )),
         --- ClientFinished
         - (client-finished(
               client-encryption(
                  master-secret(
                     pre-master-secret(
                        exponentiation(
                           PointS, 
                           scalar(
                              ClientC, 
                              random2
                           )
                        ), 
                        encapsulation-key(
                           Post-Quantum-Public-KeyS, 
                           post-quantum-secret-key(
                              ClientC, 
                              random3
                           )
                        )
                     ), 
                     random(
                        ClientC, 
                        random1
                     ), 
                     NonceS, 
                     exponentiation(
                        p, 
                        scalar(
                           ClientC, 
                           random2
                        )
                     ), 
                     encapsulation-cipher(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  (client-hello(
                     random(
                        ClientC, 
                        random1
                     )
                  )), 
                  (server-hello(
                     NonceS, 
                     SessionS
                  )), 
                  (server-certificate(
                     certificate(
                        ServerC
                     )
                  )), 
                  (server-key-exchange(
                     PointS, 
                     Post-Quantum-Public-KeyS, 
                     signature(
                        ServerC, 
                        PointS, 
                        Post-Quantum-Public-KeyS, 
                        random(
                           ClientC, 
                           random1
                        ), 
                        NonceS
                     )
                  )), 
                  (client-key-exchange(
                     exponentiation(
                        p, 
                        scalar(
                           ClientC, 
                           random2
                        )
                     ), 
                     encapsulation-cipher(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ))
               )
            )),
         --- ServerFinished
         + (server-finished(
               server-encryption(
                  master-secret(
                     pre-master-secret(
                        exponentiation(
                           PointS,
                           scalar(
                              ClientC,
                              random2
                           )
                        ),
                        encapsulation-key(
                           Post-Quantum-Public-KeyS, 
                           post-quantum-secret-key(
                              ClientC, 
                              random3
                           )
                        )
                     ), 
                     random(
                        ClientC, 
                        random1
                     ), 
                     NonceS, 
                     exponentiation(
                        p, 
                        scalar(
                           ClientC, 
                           random2
                        )
                     ), 
                     encapsulation-cipher(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  (client-hello(
                     random(
                        ClientC, 
                        random1
                     )
                  )), 
                  (server-hello(
                     NonceS, 
                     SessionS
                  )), 
                  (server-certificate(
                     certificate(
                        ServerC
                     )
                  )), 
                  (server-key-exchange(
                     PointS,
                     Post-Quantum-Public-KeyS,
                     signature(
                        ServerC,
                        PointS,
                        Post-Quantum-Public-KeyS,
                        random(
                           ClientC,
                           random1
                        ),
                        NonceS
                     )
                  )),
                  (client-key-exchange(
                     exponentiation(
                        p,
                        scalar(
                           ClientC,
                           random2
                        )
                     ), 
                     encapsulation-cipher(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC,
                           random3
                        )
                     )
                  )), 
                  (client-finished(
                     client-encryption(
                        master-secret(
                           pre-master-secret(
                              exponentiation(
                                 PointS,
                                 scalar(
                                    ClientC,
                                    random2
                                 )
                              ), 
                              encapsulation-key(
                                 Post-Quantum-Public-KeyS, 
                                 post-quantum-secret-key(
                                    ClientC,
                                    random3
                                 )
                              )
                           ), 
                           random(
                              ClientC,
                              random1
                           ), 
                           NonceS,
                           exponentiation(
                              p, 
                              scalar(
                                 ClientC,
                                 random2
                              )
                           ), 
                           encapsulation-cipher(
                              Post-Quantum-Public-KeyS,
                              post-quantum-secret-key(
                                 ClientC,
                                 random3
                              )
                           )
                        ),
                        (client-hello(
                           random(
                              ClientC, 
                              random1
                           )
                        )), 
                        (server-hello(
                           NonceS, 
                           SessionS
                        )), 
                        (server-certificate(
                           certificate(
                              ServerC
                           )
                        )), 
                        (server-key-exchange(
                           PointS, 
                           Post-Quantum-Public-KeyS, 
                           signature(
                              ServerC, 
                              PointS, 
                              Post-Quantum-Public-KeyS, 
                              random(
                                 ClientC, 
                                 random1
                              ), 
                              NonceS
                           )
                        )), 
                        (client-key-exchange(
                           exponentiation(
                              p, 
                              scalar(
                                 ClientC, 
                                 random2
                              )
                           ), 
                           encapsulation-cipher(
                              Post-Quantum-Public-KeyS, 
                              post-quantum-secret-key(
                                 ClientC, 
                                 random3
                              )
                           )
                        ))
                     )
                  ))
               )
            )), nil] & Strand-Set:StrandSet || Intruder-Knowledge:IntruderKnowledge
         ) [nonexec] .

  eq ATTACK-STATE(20) = 
      :: random1, random2, random3 ::
      [nil,
      --- Client Side
      --- ClientHello
      + (client-hello(
            random(
               ClientC, 
               random1
            )
         )),
     --- ServerHello
      - (server-hello(
            NonceS, 
            SessionS
         )),
      --- ServerCertificate
       - (server-certificate(
            certificate(
               ServerC
            )
         )),
      --- ServerKeyExchange
      - (server-key-exchange(
            PointS, 
            Post-Quantum-Public-KeyS, 
            signature(
               ServerC, 
               PointS, 
               Post-Quantum-Public-KeyS, 
               random(
                  ClientC, 
                  random1
               ), 
               NonceS
            )
         )),
      --- ClientKeyExchange
      + (client-key-exchange(
            exponentiation(
               p, 
               scalar(
                  ClientC, 
                  random2
               )
            ), 
            encapsulation-cipher(
               Post-Quantum-Public-KeyS, 
               post-quantum-secret-key(
                  ClientC, 
                  random3
               )
            )
         )),
      --- ClientFinished
      + (client-finished(
            client-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointS, 
                        scalar(
                           ClientC, 
                           random2
                        )
                     ), 
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceS, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceS, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerC
                  )
               )), 
               (server-key-exchange(
                  PointS, 
                  Post-Quantum-Public-KeyS, 
                  signature(
                     ServerC, 
                     PointS, 
                     Post-Quantum-Public-KeyS, 
                     random(
                        ClientC, 
                        random1
                     ), 
                     NonceS
                  )
               )), 
               (client-key-exchange(
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ))
            )
         )),
      --- ServerFinished
      - (server-finished(
            server-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointS,
                        scalar(
                           ClientC,
                           random2
                        )
                     ),
                     encapsulation-key(
                        Post-Quantum-Public-KeyS, 
                        post-quantum-secret-key(
                           ClientC, 
                           random3
                        )
                     )
                  ), 
                  random(
                     ClientC, 
                     random1
                  ), 
                  NonceS, 
                  exponentiation(
                     p, 
                     scalar(
                        ClientC, 
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC, 
                        random3
                     )
                  )
               ), 
               (client-hello(
                  random(
                     ClientC, 
                     random1
                  )
               )), 
               (server-hello(
                  NonceS, 
                  SessionS
               )), 
               (server-certificate(
                  certificate(
                     ServerC
                  )
               )), 
               (server-key-exchange(
                  PointS,
                  Post-Quantum-Public-KeyS,
                  signature(
                     ServerC,
                     PointS,
                     Post-Quantum-Public-KeyS,
                     random(
                        ClientC,
                        random1
                     ),
                     NonceS
                  )
               )),
               (client-key-exchange(
                  exponentiation(
                     p,
                     scalar(
                        ClientC,
                        random2
                     )
                  ), 
                  encapsulation-cipher(
                     Post-Quantum-Public-KeyS, 
                     post-quantum-secret-key(
                        ClientC,
                        random3
                     )
                  )
               )), 
               (client-finished(
                  client-encryption(
                     master-secret(
                        pre-master-secret(
                           exponentiation(
                              PointS,
                              scalar(
                                 ClientC,
                                 random2
                              )
                           ), 
                           encapsulation-key(
                              Post-Quantum-Public-KeyS, 
                              post-quantum-secret-key(
                                 ClientC,
                                 random3
                              )
                           )
                        ), 
                        random(
                           ClientC,
                           random1
                        ), 
                        NonceS,
                        exponentiation(
                           p, 
                           scalar(
                              ClientC,
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS,
                           post-quantum-secret-key(
                              ClientC,
                              random3
                           )
                        )
                     ),
                     (client-hello(
                        random(
                           ClientC, 
                           random1
                        )
                     )), 
                     (server-hello(
                        NonceS, 
                        SessionS
                     )), 
                     (server-certificate(
                        certificate(
                           ServerC
                        )
                     )), 
                     (server-key-exchange(
                        PointS, 
                        Post-Quantum-Public-KeyS, 
                        signature(
                           ServerC, 
                           PointS, 
                           Post-Quantum-Public-KeyS, 
                           random(
                              ClientC, 
                              random1
                           ), 
                           NonceS
                        )
                     )), 
                     (client-key-exchange(
                        exponentiation(
                           p, 
                           scalar(
                              ClientC, 
                              random2
                           )
                        ), 
                        encapsulation-cipher(
                           Post-Quantum-Public-KeyS, 
                           post-quantum-secret-key(
                              ClientC, 
                              random3
                           )
                        )
                     ))
                  )
               ))
            )
         )) | nil] &
            
      :: random1', random2', random3', random4' ::
      [nil,
      --- Server Side
      --- ClientHello
      - (client-hello(
            NonceC
         )),
      --- ServerHello
      + (server-hello(
            random(
               ServerS, 
               random1'
            ), 
            session(
               ServerS, 
               random2'
            )
         )),
      --- ServerCertificate
      + (server-certificate(
            certificate(
               ServerS
            )
         )),
      --- ServerKeyExchange
     + (server-key-exchange(
            exponentiation(
               p, 
               scalar(
                  ServerS, 
                  random3'
               )
            ), 
            post-quantum-public-key(
               post-quantum-secret-key(
                  ServerS, 
                  random4'
               )
            ), 
            signature(
               ServerS, 
               exponentiation(
                  p, 
                  scalar(
                     ServerS, 
                     random3'
                  )
               ), 
               post-quantum-public-key(
                  post-quantum-secret-key(
                     ServerS, 
                     random4'
                  )
               ), 
               NonceC, 
               random(
                  ServerS, 
                  random1'
               )
            )
         )),
      --- ClientKeyExchange
      - (client-key-exchange(
            PointC, 
            CipherC
         )),
      --- ClientFinished
       - (client-finished(
            client-encryption(
               master-secret(
                  pre-master-secret(
                     exponentiation(
                        PointC,
                        scalar(
                           ServerS,
                           random3'
                        )
                     ),
                     decapsulation(
                        CipherC,
                        post-quantum-secret-key(
                           ServerS,
                           random4'
                        )
                     )
                  ),
                  NonceC,
                  random(
                     ServerS,
                     random1'
                  ),
                  PointC,
                  CipherC
               ),
               (client-hello(
                  NonceC
               )),
               (server-hello(
                  random(
                     ServerS,
                     random1'
                  ),
                  session(
                     ServerS,
                     random2'
                  )
               )),
               (server-certificate(
                  certificate(
                     ServerS
                  )
               )),
               (server-key-exchange(
                  exponentiation(
                     p,
                     scalar(
                        ServerS,
                        random3'
                     )
                  ),
                  post-quantum-public-key(
                     post-quantum-secret-key(
                        ServerS,
                        random4'
                     )
                  ),
                  signature(
                     ServerS,
                     exponentiation(
                        p,
                        scalar(
                           ServerS,
                           random3'
                        )
                     ),
                     post-quantum-public-key(
                        post-quantum-secret-key(
                           ServerS,
                           random4'
                        )
                     ),
                     NonceC,
                     random(
                        ServerS,
                        random1'
                     )
                  )
               )),
               (client-key-exchange(
                  PointC,
                  CipherC
               ))
            )
         )),
         --- ServerFinished
         + (server-finished(
               server-encryption(
                  master-secret(
                     pre-master-secret(
                        exponentiation(
                           PointC,
                           scalar(
                              ServerS,
                              random3'
                           )
                        ),
                        decapsulation(
                           CipherC,
                           post-quantum-secret-key(
                              ServerS,
                              random4'
                           )
                        )
                     ),
                     NonceC,
                     random(
                        ServerS,
                        random1'
                     ),
                     PointC,
                     CipherC
                  ),
                  (client-hello(
                     NonceC
                  )),
                  (server-hello(
                     random(
                        ServerS,
                        random1'
                     ),
                     session(
                        ServerS,
                        random2'
                     )
                  )),
                  (server-certificate(
                     certificate(
                        ServerS
                     )
                  )),
                  (server-key-exchange(
                     exponentiation(
                        p,
                        scalar(
                           ServerS,
                           random3'
                        )
                     ),
                     post-quantum-public-key(
                        post-quantum-secret-key(
                           ServerS,
                           random4'
                        )
                     ),
                     signature(
                        ServerS,
                        exponentiation(
                           p,
                           scalar(
                              ServerS,
                              random3'
                           )
                        ),
                        post-quantum-public-key(
                           post-quantum-secret-key(
                              ServerS,
                              random4'
                           )
                        ),
                        NonceC,
                        random(
                           ServerS,
                           random1'
                        )
                     )
                  )),
                  (client-key-exchange(
                     PointC,
                     CipherC
                  )),
                  (client-finished(
                     client-encryption(
                        master-secret(
                           pre-master-secret(
                              exponentiation(
                                 PointC,
                                 scalar(
                                    ServerS,
                                    random3'
                                 )
                              ),
                              decapsulation(
                                 CipherC,
                                 post-quantum-secret-key(
                                    ServerS,
                                    random4'
                                 )
                              )
                           ),
                           NonceC,
                           random(
                              ServerS,
                              random1'
                           ),
                           PointC,
                           CipherC
                        ),
                        (client-hello(
                           NonceC
                        )),
                        (server-hello(
                           random(
                              ServerS,
                              random1'
                           ),
                           session(
                              ServerS,
                              random2'
                           )
                        )),
                        (server-certificate(
                           certificate(
                              ServerS
                           )
                        )),
                        (server-key-exchange(
                           exponentiation(
                              p,
                              scalar(
                                 ServerS,
                                 random3'
                              )
                           ),
                           post-quantum-public-key(
                              post-quantum-secret-key(
                                 ServerS,
                                 random4'
                              )
                           ),
                           signature(
                              ServerS,
                              exponentiation(
                                 p,
                                 scalar(
                                    ServerS,
                                    random3'
                                 )
                              ),
                              post-quantum-public-key(
                                 post-quantum-secret-key(
                                    ServerS,
                                    random4'
                                 )
                              ),
                              NonceC,
                              random(
                                 ServerS,
                                 random1'
                              )
                           )
                        )),
                        (client-key-exchange(
                           PointC,
                           CipherC
                        ))
                     )
                  ))
               )
            )) | nil]
      || empty
      || nil
      || nil
      || nil
      [nonexec] .    
endfm

select MAUDE-NPA .